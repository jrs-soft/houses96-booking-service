name: Deploy to Google Cloud Compute Engine

on:
  push:
    branches: [ "dev" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Use the Temurin distribution of OpenJDK
          java-version: '17'

      # Step 3: Build the JAR file
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Step 4: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 5: Configure Google Cloud project
      - name: Configure Google Cloud project
        run: gcloud config set project test-houses96

      # Step 6: Set up the Google Compute Engine VM
      - name: Create VM instance if it doesn't exist
        run: |
          # Check if the VM instance exists
          INSTANCE_EXISTS=$(gcloud compute instances list --filter="name=test-houses96" --format="value(name)")

          # If the VM doesn't exist, create it
          if [ -z "$INSTANCE_EXISTS" ]; then
            gcloud compute instances create test-houses96 \
              --zone=us-central1-a \
              --image-family debian-11 \
              --image-project debian-cloud \
              --machine-type e2-medium \
              --tags http-server,https-server
          fi

      # Step 7: Copy the JAR file to the VM
      - name: Copy JAR to VM
        run: |
          gcloud compute scp target/*.jar test-houses96:~/ --zone=us-central1-a

      # Step 8: Start the Spring Boot application on the VM
      - name: Start Spring Boot app on VM
        run: |
          gcloud compute ssh test-houses96 --zone=us-central1-a --command="nohup java -jar ~/*.jar > app.log 2>&1 &"
